{"version":3,"sources":["components/DateTimeDisplay.tsx","components/Todo.tsx","api/todoApi.ts","components/Loading.tsx","containers/Todos.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["DateTimeDisplay","_ref","date","Date","year","getFullYear","month","getMonth","day","getDay","hour","getHours","min","getMinutes","react","style","fontSize","padding","Todo","todo","onImportantClick","onCompleteClick","task","important","completed","clickImportant","type","title","checked","onChange","textDecoration","onClick","handleError","alert","Loading","Todos","_React$useState","React","_React$useState2","Object","slicedToArray","todos","setTodos","_React$useState3","_React$useState4","loading","setLoading","showLoading","hideLoading","fetch","then","response","json","catch","list","updateTodos","prevTodos","map","t","id","importants","filter","unimportants","concat","method","api","todoResult","key","length","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4d653d1.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport interface IProps {\n    date: Date | string\n}\n\nexport default function DateTimeDisplay({date}: IProps) {\n    if (typeof date === 'string') {\n        date = new Date(date);\n    }\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDay();\n    const hour = date.getHours();\n    const min = date.getMinutes();\n\n    return (<span style={{fontSize: 'small', padding: '0 5px 0 5px'}}>{day}/{month}/{year} {hour}:{min}</span>);\n}","import * as React from 'react';\nimport DateTimeDisplay from './DateTimeDisplay';\n\nexport interface ITodo {\n    id: string\n    task: string\n    date: Date\n    completed: boolean\n    important: boolean\n}\n\nexport interface ITodoProps {\n    todo: ITodo\n    onImportantClick: (todo: ITodo) => void\n    onCompleteClick: (todo: ITodo) => void\n}\n\nexport default function Todo({ todo, onImportantClick, onCompleteClick }: ITodoProps) {\n    const { task, date, important, completed } = todo;\n\n    const clickImportant = () => onImportantClick(todo);\n    const clickComplete = () => onCompleteClick(todo);\n\n    return <div>\n        <input type=\"checkbox\" title=\"Completed\" checked={completed} onChange={clickComplete} />\n        <span style={{padding: '0 5px 0 5px', textDecoration: completed?'line-through':''}}>{task}</span>\n        <DateTimeDisplay date={date}/>\n        {important ? \n            <button onClick={clickImportant}>Not important</button> : \n            <button onClick={clickImportant}>Mark as important</button>}\n    </div>\n}","import { ITodo } from './../components/Todo';\n\nfunction handleError() {\n    alert('Error occurred.');\n}\n\nexport function loadTodos() {\n    return fetch('/todos')\n    .then(function(response) {\n      return response.json();\n    })\n    .catch(handleError);\n}\n\nexport function toggleComplete(todo: ITodo) {\n    return fetch(`/todos/toggleComplete?id=${todo.id}`, {\n        method: 'PUT'\n    })\n    .then(function(response) {\n      return response.json();\n    })\n    .catch(handleError);\n}\n\nexport function toggleImportant(todo: ITodo) {\n    return fetch(`/todos/toggleImportant?id=${todo.id}`, {\n        method: 'PUT'\n    })\n    .then(function(response) {\n      return response.json();\n    })\n    .catch(handleError);\n}","import * as React from 'react';\n\nexport default function Loading() {\n    return <div>Loading...</div>\n}","import * as React from 'react';\nimport Todo, { ITodo } from '../components/Todo';\nimport * as api from '../api/todoApi';\nimport Loading from '../components/Loading';\n\nexport function Todos() {\n    const [todos, setTodos] = React.useState<ITodo[]>([]);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const showLoading = () => setLoading(true);\n    const hideLoading = () => setLoading(false);\n\n    React.useEffect(() => {\n        showLoading();\n        api.loadTodos()\n            .then(list => {\n                hideLoading();\n                setTodos(list);\n            });\n    }, []);\n\n    const updateTodos = (todo: ITodo) => {\n        hideLoading();\n        setTodos(prevTodos => {\n            return prevTodos.map(t => {\n                if (t.id === todo.id) {\n                    return todo;\n                }\n                return t;\n            })\n        })\n    }\n\n    const importants = todos.filter(t => t.important);\n    const unimportants = todos.filter(t => !t.important);\n\n    const onImportantClick = (todo: ITodo) => {\n        showLoading();\n        api.toggleImportant(todo)\n        .then(todoResult => {\n            updateTodos(todoResult);\n        });\n        \n    };\n    const onCompleteClick = (todo: ITodo) => {\n        showLoading();\n        api.toggleComplete(todo)\n        .then(todoResult => {\n            updateTodos(todoResult);\n        });\n    };\n\n    return (<div>\n        <h2>Todo List</h2>\n        <h3>Importants</h3>\n        {importants.map(todo => <Todo onImportantClick={onImportantClick} onCompleteClick={onCompleteClick} key={todo.id} todo={todo} />)}\n        {!importants.length && <p>No important todo</p>}\n        <br/>\n        <h3>Todos</h3>\n        {unimportants.map(todo => <Todo onImportantClick={onImportantClick} onCompleteClick={onCompleteClick} key={todo.id} todo={todo} />)}\n        {!unimportants.length && <p>No todo</p>}\n        {loading && <Loading/>}\n    </div>);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Todos } from './containers/Todos';\n\nexport default function App() {\n  return (\n    <div style={{padding: '10px'}}>\n      <Todos/>\n    </div>);\n}"],"sourceRoot":""}